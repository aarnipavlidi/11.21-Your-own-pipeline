{"version":3,"sources":["reducers/notificationReducer.js","services/anecdotes.js","reducers/anecdoteReducer.js","components/AnecdoteForm.js","components/AnecdoteList.js","components/Notification.js","reducers/filterReducer.js","components/Filter.js","App.js","store.js","index.js"],"names":["timeout","url","getValuesFromDatabase","a","axios","get","response","data","createNewValueDatabase","getContent","valueStructure","content","votes","post","updateValueDatabase","getCurrentValue","updateVotes","put","id","reducer","state","action","console","log","type","getCurrentID","getMatchingID","find","results","updateValue","map","showNotificationMessage","notificationMessage","notificationDuration","dispatch","clearTimeout","notification","setTimeout","notificationReducer","mapDispatchToProps","createNewValue","getValueContent","anecdotesService","ConnectedAnecdoteForm","connect","values","message","props","addValue","event","preventDefault","target","newText","value","onSubmit","name","AnecdoteList","anecdotes","useSelector","useDispatch","voteButton","likeValueButton","getFilterValueFromStore","filter","filterValue","toLowerCase","includes","sort","b","onClick","ConnectedNotification","style","border","padding","borderWidth","filterReducer","changeFilterValue","getCurrentFilterValue","ConnectedFilter","marginBottom","onChange","App","useEffect","combineReducers","anecdoteReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7da9f639.chunk.js","sourcesContent":["// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\r\n// then please contact me by sending email at me@aarnipavlidi.fi <3\r\n\r\n// Alustetaan muuttuja \"notificationReducer\", joka suorittaa {...} sisällä olevat asiat. Muuttuja saa myös käyttöönsä parametrien => \"state\" ja \"action\" arvot.\r\nconst notificationReducer = (state = null, action) => {\r\n\r\n  // Jos alla oleva if-ehto toteutuu, niin sovellus suorittaa {...} sisällä olevat asiat eli,\r\n  // aina kun käyttäjä äänestää tiettyä arvoa tai lisää uuden arvon tietokantaan, niin alla\r\n  // oleva funktio palauttaa storeen => \"action.notification\":n datan => \"message\" objektille.\r\n  if (action.type === 'SHOW_NOTIFICATION') {\r\n    return action.notification\r\n  }\r\n\r\n  // Jos alla oleva if-ehto totetuu, niin sovellus suorittaa {...} sisällä olevat asiat eli,\r\n  // aina kun käyttäjä joko lisää uuden arvon tai äänestää tiettyä arvoa, niin tämä kyseinen\r\n  // funktio suoritetaan (setTimeout(...) kautta) eli juuri renderöity \"notifikaatio viesti\"\r\n  // piilotetaan käyttäjältä. Tämä johtuu siitä, koska \"notification\" on yhtä kuin \"null\".\r\n  if (action.type === 'HIDE_NOTIFICATION') {\r\n    return action.notification\r\n  }\r\n\r\n  return state\r\n}\r\n\r\nlet timeout // Alustetaan muuttuja \"timeout\" väliaikaisesti alla olevaa funktiota varten.\r\n\r\n// Viedään muuttujan \"showNotificationMessage\" sisältö käytettäväksi, jotta esim. \"index.js\"\r\n// tiedosto pystyy hyödyntämään sovelluksen aikana. Aina kun kyseiseen funktioon\r\n// tehdään viittaus, niin sovellus tekee {...} sisällä olevat asiat. Ota myös huomioon,\r\n// että funktio saa käyttöönsä kaksi (2) erilaista paremetrin arvoa eli => \"notificationMessage\"\r\n// josta löytyy sen hetkinen viesti mikä halutaan renderöidä käyttäjälle näkyviin sekä\r\n// => \"notificationDuration\", jonka avulla määritellään \"setTimeout(...)\" funktiota\r\n// varten ajastin, että kuinka kauan \"notifikaatio\" on näkyvissä käyttäjälle.\r\nexport const showNotificationMessage = (notificationMessage, notificationDuration) => {\r\n  // Tehtävää \"6.21 anekdootit, loppuhuipennus\" varten olemme muokanneet koodia niin,\r\n  // että aina kun käyttäjä äänestää tiettyä tekstiä, niin sen hetkinen ajastin eli\r\n  // \"setTimeout(...)\" funktio \"resetoidaan\". Tämän avulla varmistetaan sen, että\r\n  // aina viimeisin (uusin) notifikaatio kestää alkuperäisen keston ajan. Funktio\r\n  // on alustettu muuttujalle => timeout ja kyseinen muuttuja on alustettu\r\n  // väliaikaisena muuttujana (let) funktion ulkopuolelle. Lisää tietoa funktiosta\r\n  // löytyy täältä: https://www.w3schools.com/jsref/met_win_cleartimeout.asp\r\n  return async dispatch => {\r\n    clearTimeout(timeout)\r\n    dispatch({\r\n      type: 'SHOW_NOTIFICATION',\r\n      notification: notificationMessage\r\n    })\r\n    timeout = setTimeout(() => {\r\n      dispatch({\r\n        type: 'HIDE_NOTIFICATION',\r\n        notification: null\r\n      })\r\n    }, notificationDuration * 500)\r\n  }\r\n}\r\n\r\n// Viedään muuttujan \"notificationReducer\" avulla tämän tiedoston sisältö käytettäväksi, jotta esim. \"index.js\" tiedosto pystyy hyödyntämään sovelluksen aikana.\r\nexport default notificationReducer\r\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\r\n// then please contact me by sending email at me@aarnipavlidi.fi <3\r\n\r\nimport axios from 'axios' // Sovellus ottaa \"axios\" nimisen kirjaston käyttöönsä.\r\nconst url = 'http://localhost:8000/api/anecdotes' // Alustetaan muuttuja \"url\", joka on yhtä kuin kyseisen tekstin arvo.\r\n\r\n// Alustetaan muuttuja \"getValuesFromDatabase\", joka suorittaa {...} sisällä olevat asiat. Kun alla\r\n// oleva funktio on suoritettu, niin palautetaan data takaisin käyttäjälle näkyviin\r\n// \"response.data\" muuttujan avulla. Funktiota hyödynnetään => \"App.js\" tiedostossa.\r\nconst getValuesFromDatabase = async () => {\r\n  const response = await axios.get(url) // Alustetaan muuttuja \"response\", joka suorittaa kyseisen funktion kunnes siirtyy seuraavaan kohtaan sovelluksessa.\r\n  return response.data // Funktio palauttaa takaisin käyttäjälle => \"response.data\" muuttujan arvon.\r\n}\r\n\r\n// Alustetaan muuttuja \"createNewValueDatabase\", joka suorittaa {...} sisällä olevat asiat. Kun\r\n// alla oleva funktio on suoritettu, niin palautetaan data takaisin käyttäjälle näkyviin\r\n// \"response.data\" muuttujan avulla. Funktiota hyödynnetään => \"AnecdoteForm.js\" tiedostossa.\r\n// Funktio saa myös käyttöönsä \"getContent\" parametrin arvon, eli aina kun käyttäjä lisää\r\n// uuden arvon tietokantaan, niin sen hetkinen arvo tallentuu kyseisen parametrin alle.\r\nconst createNewValueDatabase = async (getContent) => {\r\n  const valueStructure = { // Alustetaan muuttuja \"valueStructure\", joka saa {...} sisällä olevat objektit käyttöönsä.\r\n    content: getContent, // eli \"valueStructure.content\" on yhtä kuin => \"getContent\" muuttujan arvo.\r\n    votes: 0 // eli \"valueStructure.votes\" on yhtä kuin => \"0\" arvo.\r\n  }\r\n  const response = await axios.post(url, valueStructure) // Alustetaan muuttuja \"response\", joka suorittaa kyseisen funktion kunnes siirtyy seuraavaan kohtaan sovelluksessa.\r\n  return response.data // Funktio palauttaa takaisin käyttäjälle => \"response.data\" muuttujan arvon.\r\n}\r\n\r\n// Alustetaan muuttuja \"updateValueDatabase\", joka suorittaa {...} sisällä olevat asiat. Kun\r\n// alla oleva funktio on suoritettu, niin palautetaan data takaisin käyttäjälle näkyviin\r\n// \"response.data\" muuttujan avulla. Funktiota hyödynnetään => \"AnecdoteList.js\" tiedostossa.\r\n// Funktio saa myös käyttöönsä \"getCurrentValue\" parametrin arvon, eli aina kun käyttäjä\r\n// haluaa antaa uuden äänen (vote) tietylle tekstille, niin kyseisen tekstin arvot eli =>\r\n// \"content\", \"votes\" sekä \"id\" siirtyvät kyseisen parametrin alle.\r\nconst updateValueDatabase = async (getCurrentValue) => {\r\n  const updateVotes = {\r\n    content: getCurrentValue.content,\r\n    votes: getCurrentValue.votes + 1\r\n  }\r\n  const response = await axios.put(`${url}/${getCurrentValue.id}`, updateVotes) // Alustetaan muuttuja \"response\", joka suorittaa kyseisen funktion kunnes siirtyy seuraavaan kohtaan sovelluksessa.\r\n  return response.data // Funktio palauttaa takaisin käyttäjälle => \"response.data\" muuttujan arvon.\r\n}\r\n\r\n// Viedään (export) alla olevat muuttujat sovelluksen käytettäväksi, jotta esim. \"App.js\" tiedosto pystyy suorittamaan kyseiset funktiot.\r\nexport default { getValuesFromDatabase, createNewValueDatabase, updateValueDatabase }\r\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\r\n// then please contact me by sending email at me@aarnipavlidi.fi <3\r\n\r\nimport anecdotesService from '../services/anecdotes' // Alustetaan muuttuja \"anecdotesService\", joka hyödyntää \"anecdotes.js\" (erillinen moduuli) tiedostoa eli => \"./services/anecdotes.js\".\r\n\r\n// Alustetaan muuttuja \"reducer\", joka suorittaa {...} sisällä olevat asiat. Muuttuja saa myös käyttöönsä parametrien => \"state\" ja \"action\" arvot.\r\nconst reducer = (state = [], action) => {\r\n  // Kun käyttäjä painaa jotain painiketta, niin alla oleva teksti tulostuu\r\n  // konsoliin näkyviin, jonka perään tulee vielä muuttujan objektin arvo.\r\n  console.log('User has given new like to the following id:', action.data)\r\n\r\n  // Jos alla oleva if-ehto toteutuu, niin sovellus suorittaa {...} sisällä olevat asiat.\r\n  // Kun käyttäjä saapuu sovellukseen, niin kyseiseen funktioon eli \"showValuesFromDatabase\",\r\n  // joka palauttaa takaisin => \"type: SHOW_ALL_VALUES\" sekä => \"data: values\".\r\n  if (action.type === 'SHOW_ALL_VALUES') {\r\n    return action.data\r\n  }\r\n\r\n  // Jos alla oleva if-ehto toteutuu, niin sovellus suorittaa {...} sisällä olevat asiat.\r\n  if (action.type === 'ADD_NEW_LIKE') {\r\n    const getCurrentID = action.data.id // Alustetaan muuttuja \"getCurrentID\", joka on yhtä kuin \"action.data.id\" muuttujan arvo.\r\n\r\n    // Alustetaan muuttuja \"getMatchingID\", joka suorittaa alla olevan funktion. Tarkoituksena\r\n    // on siis etsiä \"state\" muuttujasta (taulukosta) \"id\" objektin arvo, joka on yhtä kuin\r\n    // \"getCurrentID\" muuttujan kanssa. Funktio palauttaa taulukon, jonka sisältä löytyy\r\n    // kolme (3) objektia eli => [content: xxx, id: xxx, votes: xxx].\r\n    const getMatchingID = state.find(results => results.id === getCurrentID)\r\n\r\n    // Alustetaan muuttuja \"updateValue\", joka suorittaa {...} sisällä olevat asiat. Luodaan\r\n    // kopio sen hetkisestä \"getMatchingID\" muuttujan arvosta ja lisätään objektiin \"votes\"\r\n    // => sen hetkisen objektin arvo eli => \"getMatchingID.votes\" sekä lisätään + 1.\r\n    const updateValue = {\r\n      ...getMatchingID,\r\n      votes: getMatchingID.votes + 1\r\n    }\r\n\r\n    // Sovellus renderöi alla olevan funktion tuloksen takaisin käyttäjälle, eli luodaan uusi\r\n    // taulukko \"map()\" funktion avulla. Jos \"results.id on epätosi muuttujan \"getCurrentID\"\r\n    // kanssa (eli sen hetkisen klikatun painikkeen kanssa), niin uuteen taulukkoon tulee\r\n    // alkuperäisen muuttujan arvot. Muussa tapauksessa renderöidään \"updateValue\" arvot.\r\n    return state.map(results =>\r\n      results.id !== getCurrentID ? results : updateValue)\r\n    }\r\n\r\n  // Jos alla oleva if-ehto toteutuu, niin sovellus suorittaa {...} sisällä olevat asiat.\r\n  // renderöidään takaisin, siis hetkisen \"state\" muuttujan taulukko => luomalla kopio\r\n  // siitä, jonka perään tulee käyttäjän lisämää uusi arvo näkyviin sivulle.\r\n  if (action.type === 'ADD_NEW_CONTENT') {\r\n    return [...state, action.data]\r\n  }\r\n\r\n  return state\r\n}\r\n\r\n// Viedään muuttujan \"showValuesFromDatabase\" sisältö käytettäväksi, jotta esim. \"index.js\"\r\n// tiedosto pystyy hyödyntämään sovelluksen aikana. Aina kun kyseiseen funktioon\r\n// tehdään viittaus, niin sovellus tekee {...} sisällä olevat asiat. Alustetaan myös\r\n// muuttuja \"response\", joka suorittaa  sen rivillä olevan funktion (await...), jonka\r\n// jälkeen suoritetaan vasta => \"dispatch(...)\" funktio.\r\nexport const showValuesFromDatabase = () => {\r\n  return async dispatch => {\r\n    const response = await anecdotesService.getValuesFromDatabase()\r\n    dispatch({\r\n      type: 'SHOW_ALL_VALUES',\r\n      data: response\r\n    })\r\n  }\r\n}\r\n\r\n// Viedään muuttujan \"likeValueButton\" sisältö käytettäväksi, jotta esim. \"index.js\"\r\n// tiedosto pystyy hyödyntämään sovelluksen aikana. Aina kun kyseiseen funktioon\r\n// tehdään viittaus, niin sovellus tekee {...} sisällä olevat asiat. Alustetaan myös\r\n// muuttuja \"response\", joka suorittaa sen rivillä olevan funktion (await...), jonka\r\n// jälkeen suoritetaan vasta => \"dispatch(...)\" funktio. Ota myös huomoon, että\r\n// muuttujasta eli \"getCurrentValue\" löytyy kolme (3) erilaista objektia =>\r\n// \"content\", \"votes\" sekä \"id\" objektien arvot. Näitä hyödynnetään, kun sovellus\r\n// suorittaa \"updateValueDatabase(...)\" funktiota => \"anecdotes.js\" tiedostossa.\r\nexport const likeValueButton = (getCurrentValue) => {\r\n  return async dispatch => {\r\n    const response = await anecdotesService.updateValueDatabase(getCurrentValue)\r\n    dispatch({\r\n      type: 'ADD_NEW_LIKE',\r\n      data: response\r\n    })\r\n  }\r\n}\r\n\r\n// Viedään muuttujan \"createNewValue\" sisältö käytettäväksi, jotta esim. \"index.js\"\r\n// tiedosto pystyy hyödyntämään sovelluksen aikana. Aina kun kyseiseen funktioon\r\n// tehdään viittaus, niin sovellus tekee {...} sisällä olevat asiat. Ota huomioon,\r\n// että kyseisen parametrin sisältä löytyy kaksi (2) objektia eli => \"content\" ja\r\n// \"votes\". Aikaisemmissa tehtävissä käytimme manuaalista id:n arvo generointia,\r\n// mutta koska olemme ottaneet käyttöön backendin, niin se generoi id:n puolestamme.\r\nexport const createNewValue = (getValueContent) => {\r\n  return async dispatch => {\r\n    const response = await anecdotesService.createNewValueDatabase(getValueContent)\r\n    dispatch({\r\n      type: 'ADD_NEW_CONTENT',\r\n      data: response\r\n    })\r\n  }\r\n}\r\n\r\n// Viedään muuttujan \"reducer\" avulla tämän tiedoston sisältö käytettäväksi, jotta esim. \"index.js\" tiedosto pystyy hyödyntämään sovelluksen aikana.\r\nexport default reducer\r\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\r\n// then please contact me by sending email at me@aarnipavlidi.fi <3\r\n\r\nimport React from 'react'; // Komponentti ottaa \"react\" nimisen kirjaston käyttöönsä.\r\nimport { connect } from 'react-redux' // Komponentti ottaa \"connect\" funktion käyttöönsä => \"react-redux\" kirjaston kautta.\r\n\r\nimport { createNewValue } from '../reducers/anecdoteReducer' // Komponentti ottaa \"createNewValue\" funktion käyttöönsä, joka sijaitsee => \"anecdoteReducer.js\" tiedostossa.\r\nimport { showNotificationMessage } from '../reducers/notificationReducer' // Komponentti ottaa \"showNotificationMessage\" funktion käyttöönsä, joka sijaitsee => \"anecdoteReducer.js\" tiedostossa.\r\n\r\nconst AnecdoteForm = (props) => { // Alustetaan \"AnecdoteForm\" niminen komponentti, joka suorittaa {...} sisällä olevat asiat.\r\n  // Alustetaan muuttuja \"addValue\", joka suorittaa {...} sisällä olevat asiat,\r\n  // aina kun kyseiseen funktioon tehdään viittaus eli aina kun, käyttäjä klikkaa\r\n  // painiketta, niin suoritetaan kyseinen funktio ja lopuksi viedään tiedot\r\n  // eteenpäin => \"createNewValue(...)\" funktiota varten, jotta uusi arvo näkyy sivulla.\r\n  // Muuttuja \"addValue\" myös suorittaa funktion => \"showNotificationMessage(...)\",\r\n  // joka saa käyttöönsä kaksi (2) erilaista parametrin arvoa sovelluksen käytettäväksi.\r\n  const addValue = async (event) => {\r\n    event.preventDefault() // The event.preventDefault() method stops the default action of an element from happening.\r\n    // Ota myös huomioon, että alla olevan input:in => \"name\" arvo on yhtä kuin \"newText\", jos sitä ei olisi tai on väärä, niin tulee erroria! :)\r\n    const getContent = event.target.newText.value // Alustetaan muuttuja \"getContent\", joka saa sen hetkisen arvon, minkä käyttäjä laittaa => input:in arvoksi.\r\n    event.target.newText.value = '' // Sovellus tyhjentää kyseisen input:in arvon, sen jälkeen kun yllä oleva muuttuja on saanut arvon.\r\n    props.createNewValue(getContent) // Suoritetaan kyseinen funktio (dispatch(...)) props muuttujan sekä \"mapDispatchToProps(...)\" muuttujan avulla.\r\n    props.showNotificationMessage(`You have added ${getContent} to the database. Thank you for adding!`, 10) // Suoritetaan kyseinen funktio (dispatch(...)) props muuttujan sekä \"mapDispatchToProps(...)\" muuttujan avulla.\r\n  }\r\n\r\n  // Komponentti renderöi käyttäjälle näkyviin (...) sisällä olevat asiat.\r\n  return (\r\n    <div>\r\n      <form onSubmit={addValue}>\r\n        <input name='newText' />\r\n        <button type='submit'>Add new text</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Alustetaan muuttuja \"mapStateToProps\", joka suorittaa {...} sisällä olevat asiat.\r\n// Muuttuja palauttaa meille takaisin datan, mikä sijaitsee storessa \"filter\"\r\n// objektin alla. Funktio käyttää myös parametrinä \"state\" muuttujan arvoa.\r\n// Lisää infoa funktiosta => https://react-redux.js.org/using-react-redux/connect-mapstate#defining-mapstatetoprops\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    values: state.values,\r\n    message: state.message\r\n  }\r\n}\r\n\r\n// Alustetaan muuttuja \"mapDispatchToProps\", joka suorittaa {...} sisällä olevat asiat.\r\n// Muuttujan avulla komponentti voi suorittaa \"createNewValue(...)\" actionin eli\r\n// dispatchaa ja siirtyy suorittamaan sen sisältöä => \"anecdoteReducer.js\" tiedostossa.\r\n// Tämän lisäksi komponentti voi dispatchaa => \"showNotificationMessage(...)\" muuttujan\r\n// ja suorittaa sen sisällön => \"Notification.js\" tiedostossa. Nyt molemmat muuttujat\r\n// voidaan suorittaa => \"props.funktio(parametri)\" kautta, kun aikaisemmissa\r\n// tehtävissä molemmat muuttujat suoritettiin => \"dispatch(funktio(parametri))\".\r\nconst mapDispatchToProps = {\r\n  createNewValue,\r\n  showNotificationMessage,\r\n}\r\n\r\n// Alustetaan muuttuja \"ConnectedAnecdoteForm\", jonka avulla kyseinen komponentti\r\n// eli \"AnecdoteForm\" yhdistetään storen datan kanssa => \"mapStateToProps()\"\r\n// muuttujan avulla. Tämä tarkoittaa sitä, että muuttuja \"props.values/message\"\r\n// on yhtä kuin => \"state.values/message\". Jos tätä alla olevaa muuttujaa ei olisi,\r\n// niin sovellus ei pystyisi renderöimään storessa olevaa dataa takaisin näkyviin.\r\nconst ConnectedAnecdoteForm = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AnecdoteForm)\r\n\r\n// Viedään (export) alla oleva komponentti (ConnectedAnecdoteForm) sovelluksen käytettäväksi, jotta esim. \"App.js\" tiedosto pystyy suorittamaan kyseiset funktiot.\r\nexport default ConnectedAnecdoteForm\r\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\r\n// then please contact me by sending email at me@aarnipavlidi.fi <3\r\n\r\nimport React from 'react'; // Komponentti ottaa \"react\" nimisen kirjaston käyttöönsä.\r\nimport { useSelector, useDispatch } from 'react-redux' // Komponentti ottaa \"useSelector\" ja \"useDispatch\" funktiot käyttöönsä => \"react-redux\" kirjaston kautta.\r\nimport { likeValueButton } from '../reducers/anecdoteReducer' // Komponentti ottaa \"likeValueButton\" funktion käyttöönsä, joka sijaitsee => \"anecdoteReducer.js\" tiedostossa.\r\n\r\nimport { showNotificationMessage } from '../reducers/notificationReducer' // Komponentti ottaa \"showNotificationMessage\" funktion käyttöönsä, joka sijaitsee => \"anecdoteReducer.js\" tiedostossa.\r\n\r\nconst AnecdoteList = () => { // Alustetaan \"AnecdoteList\" niminen komponentti, joka suorittaa {...} sisällä olevat asiat.\r\n  // Alustetaan muuttuja \"anecdotes\", joka suorittaa \"useSelector(...)\" funkion. Tämän avulla päästään\r\n  // käsiksi \"storeen\" tallennettuun taulukon arvoihin. Lisää tästä täältä: https://react-redux.js.org/api/hooks#useselector\r\n  // Ota myös huomioon, että käytämme alla olevan funktion sisällä => \"state.values\",\r\n  // koska olemme asettaneet aikaisemmin storeen (store.js) kyseisen objektin arvon.\r\n  const anecdotes = useSelector(state => state.values)\r\n  // Alustetaan muuttuja \"dispatch\", joka suorittaa \"useDispatch()\" funktion. Tämän avulla sovellus\r\n  // pystyy tekemään muutoksia \"storeen\" tallennettuihin  taulukon arvoihin. Lisää tästä täältä: https://react-redux.js.org/api/hooks#usedispatch\r\n  const dispatch = useDispatch()\r\n\r\n  // Alustetaan muuttuja \"voteButton\", joka suorittaa {...} sisällä olevat asiat aina kun kyseiseen\r\n  // funktioon tehdään viittaus. Funktio saa myös käyttöönsä parametrin => \"getCurrentValue\" arvon,\r\n  // jonka sisältä löytyy klikatun \"content\", \"votes\" sekä \"id\" objektien arvot. Funktion tarkoituksena\r\n  // on toimia niin, että aina kun käyttäjä äänestää tiettyä tekstiä, niin funktio suorittaa kaksi (2)\r\n  // => \"dispatch(...)\" funktiota. Funktiolla \"showNotificationMessage(...)\" löytyy myös kaksi (2)\r\n  // erilaista parametrin arvoa, jotka se saa käyttöönsä sovelluksen käytettäväksi.\r\n  const voteButton = (getCurrentValue) => {\r\n    dispatch(likeValueButton(getCurrentValue)) // Sovellus suorittaa funktion \"likeValueButton(...)\", joka saa parametrin \"getCurrentValue\" muuttujan arvon.\r\n    dispatch(showNotificationMessage(`You have voted for ${getCurrentValue.content}. Thank you for voting!`, 10)) // Sovellus suorittaa funktion \"showNotificationVoted(...)\", joka saa parametrin \"getCurrentValue.content\" muuttujan arvon.\r\n  }\r\n\r\n  // Tehtävää: \"6.5*: anekdootit, step3\" varten, olemme muokanneet koodia hieman, niin että\r\n  // sovellus renderöi arvot äänten (\"votes\" objektin) mukaisessa suuruusjärjestyksessä.\r\n  // Funtion \"sort(...)\" sisältä löytyy paremetrit => \"a\" sekä \"b\", missä \"a\" tarkoittaa\r\n  // ensimmäistä elementtiä vertailua varten ja \"b\" toista elementtiä vertailua varten.\r\n  // Kun \"vertailu\" on luotu, niin luodaan sen pohjalta uusi taulukko \"map(...)\" funktion\r\n  // avulla, joka renderöi käyttäjälle näkyviin sen hetkiset arvot suuruusjärjestyksessä.\r\n\r\n  const getFilterValueFromStore = useSelector(state => state.filter) // Alustetaan muuttuja \"getFilterValueFromStore\", joka on yhtä kuin \"storessa\" sijaitsevan => \"filter\" objektin arvo.\r\n\r\n  // Tehtävää: \"6.12* paremmat anekdootit, step10\" varten, olemme muokanneet koodia hieman,\r\n  // niin että sovellus renderöi lukemat sen mukaan, mitä input:in arvoksi käyttäjä laittaa.\r\n  // Olemme alustaneet sitä varten muuttujan \"getFilterValueFromStore\", joka on oletuksena\r\n  // arvoa '' eli sovellus renderöi kaikki nykyiset arvot näkyviin käyttäjälle. Jos käyttäjä\r\n  // kirjoittaa jotain input:iin, niin sen hetkinen arvo näkyy storessa => \"filter\" objektissa.\r\n  // Haluamme filtteröidä arvot \"content\" objektin mukaan ja varmistamme, että kyseisen objektin\r\n  // arvot muutetaan pieniksi kirjaimiksi \"toLowerCase()\" funktion avulla sekä teemme tämän myös\r\n  // input:in arvon suhteen. Me teemme tämän sen takia, koska emme voi olettaa haluaako käyttäjä\r\n  // kirjoittaa inputtiin joko pienillä tai isoilla kirjaimilla! :)\r\n\r\n  // Komponentti renderöi käyttäjälle näkyviin (...) sisällä olevat asiat.\r\n  return (\r\n    <div>\r\n      {anecdotes.filter(filterValue => filterValue.content.toLowerCase().includes(getFilterValueFromStore.toLowerCase())).sort((a, b) => b.votes - a.votes).map(results =>\r\n        <div key={results.id}>\r\n          <div>\r\n            <h2>{results.content}</h2>\r\n          </div>\r\n          <div>\r\n            <p>Content has been voted for total of {results.votes} times <button onClick={() => voteButton(results)}>vote</button></p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\n// Viedään (export) alla oleva komponentti (AnecdoteList) sovelluksen käytettäväksi, jotta esim. \"App.js\" tiedosto pystyy suorittamaan kyseiset funktiot.\r\nexport default AnecdoteList\r\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\r\n// then please contact me by sending email at me@aarnipavlidi.fi <3\r\n\r\nimport React from 'react'; // Komponentti ottaa \"react\" nimisen kirjaston käyttöönsä.\r\nimport { connect } from 'react-redux' // Komponentti ottaa \"connect\" funktion käyttöönsä => \"react-redux\" kirjaston kautta.\r\n\r\nconst Notification = (props) => { // Alustetaan \"Notification\" niminen komponentti, joka suorittaa {...} sisällä olevat asiat.\r\n\r\n  const style = { // Alustetaan muuttuja \"style\", joka saa käyttöönsä {...} sisällä olevien objektien arvot.\r\n    border: 'solid',\r\n    padding: 10,\r\n    borderWidth: 1\r\n  }\r\n\r\n  const notificationToShow = () => { // Alustetaan muuttuja \"notificationToShow(...)\", joka suorittaa {...} sisällä olevat asiat.\r\n    // Jos alla oleva if-ehto toteutuu, eli \"props.message\" muuttuja on\r\n    // yhtä kuin => \"null\", niin renderöidään takaisin arvo => \"null\".\r\n    if (props.message === null) {\r\n      return null\r\n    }\r\n\r\n    // Jos alla oleva if-ehto toteutuu, eli \"props.message\" muuttuja on\r\n    // epätosi kuin => \"null\", niin renderöidään takaisin (...) sisällä\r\n    // olevat asiat. Elementti <h3> saa sen hetkisen \"props.message\" arvon.\r\n    if (props.message != null ) {\r\n      return (\r\n        <div style={style}>\r\n          <h3>{props.message}</h3>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  // Komponentti renderöi (...) sisällä olevan funktion takaisin käyttäjälle.\r\n  return (\r\n    <div>\r\n      {notificationToShow()}\r\n    </div>\r\n  )\r\n}\r\n\r\n// Alustetaan muuttuja \"mapStateToProps\", joka suorittaa {...} sisällä olevat asiat.\r\n// Muuttuja palauttaa meille takaisin datan, mikä sijaitsee storessa \"message\"\r\n// objektin alla. Funktio käyttää myös parametrinä \"state\" muuttujan arvoa.\r\n// Lisää infoa funktiosta => https://react-redux.js.org/using-react-redux/connect-mapstate#defining-mapstatetoprops\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    message: state.message\r\n  }\r\n}\r\n\r\n// Alustetaan muuttuja \"ConnectedNotification\", jonka avulla kyseinen komponentti\r\n// eli \"Notification\" yhdistetään storen datan kanssa => \"mapStateToProps()\"\r\n// muuttujan avulla. Tämä tarkoittaa sitä, että muuttuja \"props.message\"\r\n// on yhtä kuin => \"state.message\". Jos tätä alla olevaa muuttujaa ei olisi,\r\n// niin sovellus ei pystyisi renderöimään storessa olevaa dataa takaisin näkyviin.\r\nconst ConnectedNotification = connect(mapStateToProps)(Notification)\r\n\r\n// Viedään (export) alla oleva komponentti (ConnectedNotification) sovelluksen käytettäväksi, jotta esim. \"App.js\" tiedosto pystyy suorittamaan kyseiset funktiot.\r\nexport default ConnectedNotification\r\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\r\n// then please contact me by sending email at me@aarnipavlidi.fi <3\r\n\r\n// Alustetaan muuttuja \"filterReducer\", joka suorittaa {...} sisällä olevat asiat. Muuttuja saa myös käyttöönsä parametrien => \"state\" ja \"action\" arvot.\r\nconst filterReducer = (state = '', action) => {\r\n\r\n  // Jos alla oleva if-ehto toteutuu, niin sovellus suorittaa {...} sisällä olevat asiat,\r\n  // eli aina kun käyttäjä kirjoittaa jotain filterin input:in arvoon, niin alla oleva\r\n  // ehto toteutuu, joten funktio palauttaa takaisin => \"action.filterValue\". Tämä\r\n  // tarkoittaa sitä, että \"action.fiterValue\" on yhtä kuin \"filter\" objekti (store).\r\n  if (action.type === 'FILTER_INPUT_VALUE') {\r\n    return action.filterValue\r\n  }\r\n\r\n  return state\r\n}\r\n\r\n// Viedään muuttujan \"changeFilterValue\" sisältö käytettäväksi, jotta esim. \"index.js\"\r\n// tiedosto pystyy hyödyntämään sovelluksen aikana. Aina kun kyseiseen funktioon\r\n// tehdään viittaus, niin sovellus tekee {...} sisällä olevat asiat. Funktio saa\r\n// myös käyttöönsä parametrin \"getCurrentFilterValue\" value eli aina kun käyttäjä\r\n// kirjoittaa jotain filtterin input:in arvoon, niin sen hetkinen arvo tallentuu\r\n// tämän parametrin alle, jonka jälkeen se tallentuu storessa sijaitsevaan\r\n// (\"store.js\" tiedostossa) => \"filter\" objektin alle.\r\nexport const changeFilterValue = (getCurrentFilterValue) => {\r\n  return {\r\n    type: 'FILTER_INPUT_VALUE',\r\n    filterValue: getCurrentFilterValue\r\n  }\r\n}\r\n\r\n// Viedään muuttujan \"reducer\" avulla tämän tiedoston sisältö käytettäväksi, jotta esim. \"index.js\" tiedosto pystyy hyödyntämään sovelluksen aikana.\r\nexport default filterReducer\r\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\r\n// then please contact me by sending email at me@aarnipavlidi.fi <3\r\n\r\nimport React from 'react'; // Komponentti ottaa \"react\" nimisen kirjaston käyttöönsä.\r\nimport { connect } from 'react-redux' // Komponentti ottaa \"connect\" funktion käyttöönsä => \"react-redux\" kirjaston kautta.\r\n\r\nimport { changeFilterValue } from '../reducers/filterReducer' // Komponentti ottaa \"changeFilterValue\" funktion käyttöönsä, joka sijaitsee => \"filterReducer.js\" tiedostossa.\r\n\r\nconst Filter = (props) => { // Alustetaan \"Filter\" niminen komponentti, joka suorittaa {...} sisällä olevat asiat.\r\n\r\n  const style = { // Alustetaan muuttuja \"style\", joka saa käyttöönsä {...} sisällä olevien objektien arvot.\r\n    marginBottom: 10\r\n  }\r\n\r\n  // Komponentti renderöi käyttäjälle näkyviin (...) sisällä olevat asiat. Aina kun\r\n  // käyttäjä kirjoittaa jotain input:in arvoon, niin sovellus suorittaa funktion =>\r\n  // \"changeFilterValue(...)\" props sekä \"mapStateToProps(...)\" muuttujan avulla.\r\n  return (\r\n    <div style={style}>\r\n      <div>Filter: <input onChange={ (event) => props.changeFilterValue(event.target.value)} /></div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Alustetaan muuttuja \"mapStateToProps\", joka suorittaa {...} sisällä olevat asiat.\r\n// Muuttuja palauttaa meille takaisin datan, mikä sijaitsee storessa \"filter\"\r\n// objektin alla. Funktio käyttää myös parametrinä \"state\" muuttujan arvoa.\r\n// Lisää infoa funktiosta => https://react-redux.js.org/using-react-redux/connect-mapstate#defining-mapstatetoprops\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    filter: state.filter\r\n  }\r\n}\r\n\r\n// Alustetaan muuttuja \"mapDispatchToProps\", joka suorittaa {...} sisällä olevat asiat.\r\n// Muuttujan avulla komponentti voi suorittaa \"changeFilterValue(...)\" actionin eli\r\n// dispatchaa ja siirtyy suorittamaan sen sisältöä => \"filterReducer.js\" tiedostossa.\r\n// Nyt meillä on pelkästään => \"props.changeFilterValue(...)\" ja aikaisemmissa\r\n// tehtävissä kyseinen funktio oli muotoa => \"dispatch(changeFilterValue(...))\".\r\nconst mapDispatchToProps = {\r\n  changeFilterValue,\r\n}\r\n\r\n// Alustetaan muuttuja \"ConnectedFilter\", jonka avulla kyseinen komponentti\r\n// eli \"Filter\" yhdistetään storen datan kanssa => \"mapStateToProps()\"\r\n// muuttujan avulla. Tämä tarkoittaa sitä, että muuttuja \"props.filter\"\r\n// on yhtä kuin => \"state.filter\". Jos tätä alla olevaa muuttujaa ei olisi,\r\n// niin sovellus ei pystyisi renderöimään storessa olevaa dataa takaisin näkyviin.\r\nconst ConnectedFilter = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Filter)\r\n\r\n// Viedään (export) alla oleva komponentti (ConnectedFilter) sovelluksen käytettäväksi, jotta esim. \"App.js\" tiedosto pystyy suorittamaan kyseiset funktiot.\r\nexport default ConnectedFilter\r\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\r\n// then please contact me by sending email at me@aarnipavlidi.fi <3\r\n\r\nimport React, { useEffect } from 'react'; // Sovellus ottaa \"react\" nimisen kirjaston käyttöönsä.\r\n\r\nimport { showValuesFromDatabase } from './reducers/anecdoteReducer' // Komponentti ottaa \"showValuesFromDatabase\" funktion käyttöönsä, joka sijaitsee => \"anecdoteReducer.js\" tiedostossa.\r\nimport { useDispatch } from 'react-redux' // Komponentti ottaa \"useDispatch\" funktion käyttöönsä => \"react-redux\" kirjaston kautta.\r\n\r\nimport AnecdoteForm from './components/AnecdoteForm' // Sovellus hyödyntää \"AnecdoteForm\" (AnecdoteForm.js) nimistä komponenttia, joka sijaitsee => \"./components/AnecdoteForm\".\r\nimport AnecdoteList from './components/AnecdoteList' // Sovellus hyödyntää \"AnecdoteList\" (AnecdoteList.js) nimistä komponenttia, joka sijaitsee => \"./components/AnecdoteList\".\r\nimport Notification from './components/Notification' // Sovellus hyödyntää \"Notification\" (Notification.js) nimistä komponenttia, joka sijaitsee => \"./components/Notification\".\r\nimport Filter from './components/Filter' // Sovellus hyödyntää \"Filter\" (Filter.js) nimistä komponenttia, joka sijaitsee => \"./components/Filter\".\r\n\r\nconst App = () => { // Sovellus alkaa tästä...\r\n  // Alustetaan muuttuja \"dispatch\", joka suorittaa \"useDispatch()\" funktion. Tämän avulla sovellus\r\n  // pystyy tekemään muutoksia \"storeen\" tallennettuihin  taulukon arvoihin. Lisää tästä täältä: https://react-redux.js.org/api/hooks#usedispatch\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => { // Sovellus hyödyntää \"useEffect(...)\" funktiota ja suorittaa kyseisen funktion vain kerran eli haetaan halutut arvot erikseen tietokannasta.\r\n    // Kun käyttäjä saapuu sovellukseen, niin sovellus suorittaa => \"dispatch(...)\" funktion,\r\n    // joka sijaitsee => \"anecdoteReducer.js\" tiedostossa. Kyseinen funktio aiheuttaa sovelluksen\r\n    // aikana \"ketjureaktion\" eli sen jälkeen suoritetaan => \"getValuesFromDatabase(...)\" funktio,\r\n    // joka sijaitsee => \"services/anecdotes.js\" tiedostossa. Funktio palauttaa takaisin pyyntöön\r\n    // \"response.data\" muuttujan avulla, jonka avulla renderöidään tietokannan arvot käyttäjälle.\r\n    dispatch(showValuesFromDatabase())\r\n  }, [])\r\n\r\n  // Sovellus renderöi (...) sisällä olevat asiat käyttäjälle näkyviin.\r\n  return (\r\n    <div>\r\n      <Notification />\r\n      <h1>Anecdotes</h1>\r\n      <Filter />\r\n      <AnecdoteList />\r\n      <AnecdoteForm />\r\n    </div>\r\n  )\r\n} // Sovellus loppuu tähän...\r\n\r\n// Viedään (export) alla oleva komponentti (App) sovelluksen käytettäväksi, jotta esim. \"index.js\" tiedosto pystyy suorittamaan kyseiset funktiot.\r\nexport default App\r\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\r\n// then please contact me by sending email at me@aarnipavlidi.fi <3\r\n\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux' // Sovellus ottaa \"createStore\", \"combineReducers\" ja \"applyMiddleware\" funktiot käyttöönsä => \"redux\" kirjaston kautta.\r\nimport thunk from 'redux-thunk' // Alustetaan muuttuja \"thunk\", joka hyödyntää \"redux-thunk\" kirjaston sisältöä sovelluksen aikana.\r\nimport { composeWithDevTools } from 'redux-devtools-extension' // Sovellus ottaa \"composeWithDevTools\" funktion käyttöönsä => \"redux-devtools-extension\" kirjaston kautta.\r\n\r\nimport anecdoteReducer from './reducers/anecdoteReducer' // Alustetaan muuttuja \"anecdoteReducer\", joka hyödyntää \"anecdoteReducer.js\" tiedoston sisältöä sovelluksen aikana.\r\nimport notificationReducer from './reducers/notificationReducer' // Alustetaan muuttuja \"notificationReducer\", joka hyödyntää \"notificationReducer.js\" tiedoston sisältöä sovelluksen aikana.\r\nimport filterReducer from './reducers/filterReducer' // Alustetaan muuttuja \"filterReducer\", joka hyödyntää \"filterReducer.js\" tiedoston sisältöä sovelluksen aikana.\r\n\r\n// Alustetaan muuttuja \"reducer\", joka hyödyntää \"combineReducers(...)\" funktiota,\r\n// kyseisen funktion avulla voidaan yhdistää kolme (3) nykyistä reduceria eli tässä\r\n// tapauksessa yhdistämme \"anecdoteReducer\", \"notificationReducer\" sekä \"filterReducer\"\r\n// arvot yhteen. Kun sovellus renderöidään, niin konsoliin (redux-devtools) ilmestyy\r\n// myös kolme (3) objektia eli => \"values\", \"message\" ja \"filter\".\r\nconst reducer = combineReducers({\r\n  values: anecdoteReducer,\r\n  message: notificationReducer,\r\n  filter: filterReducer\r\n})\r\n\r\n// Alustetaan muuttuja \"store\", joka hyödyntää => \"createStore()\" funktiota. Funktio käyttää\r\n// parametrinä \"reducer\" muuttujan arvoa, lisää funktiosta löytyy täältä: https://redux.js.org/api/createstore\r\n// Muuttuja ottaa myös käyttöönsä \"composeWithDevTools()\" funktion, jonka avulla voidaan\r\n// seurata sovelluksen \"store\" tilaa ja sen muuttavia actioneja Chromen konsolin kautta.\r\n// Olemme muokanneet koodia tehtävää => \"6.15 anekdootit ja backend, step3\" varten ja lisänneet\r\n// funktion => \"applyMiddleware(...)\", jonka sisältä löytyy parametrin \"thunk\" arvo. Funktion\r\n// tarkoituksena on toimia niin, että sovellus pystyy luomaan asynkronisia action creatoreja.\r\n// Ensin siis odotetaan x asian valmistumista (await), jonka jälkeen suoritetaan \"dispatch()\" funktio.\r\nconst store = createStore(\r\n  reducer,\r\n  composeWithDevTools(\r\n    applyMiddleware(thunk)\r\n  )\r\n)\r\n\r\n// Viedään (export) alla oleva muuttuja (store) sovelluksen käytettäväksi, jotta esim. \"App.js\" tiedosto pystyy suorittamaan kyseiset funktiot.\r\nexport default store\r\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\r\n// then please contact me by sending email at me@aarnipavlidi.fi <3\r\n\r\nimport React from 'react' // Sovellus ottaa \"react\" nimisen kirjaston käyttöönsä.\r\nimport ReactDOM from 'react-dom' // Sovellus ottaa \"react-dom\" nimisen kirjaston käyttöönsä.\r\n\r\nimport { Provider } from 'react-redux' // Sovellus ottaa \"Provider\" komponentin käyttöönsä => \"react-redux\" kirjaston kautta.\r\nimport App from './App' // Sovellus ottaa \"App.js\" tiedoston sisällön käyttöönsä.\r\n\r\nimport store from './store' // Alustetaan muuttuja \"store\", joka ottaa \"store.js\" tiedoston sisällön käyttöönsä.\r\n\r\n// Sovellus renderöi käyttäjälle alla olevat komponentit näkyviin, joiden sisältö\r\n// siirtyvät => \"index.html\" tiedostoon => elementin sisälle, jonka id:n arvo on \"root\".\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}